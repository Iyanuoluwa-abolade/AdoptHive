// This is your Prisma schema file,
// learn more about it in the docs: (link unavailable)

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: (link unavailable)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id        Int      @unique @default(autoincrement())
  FirstName String
  LastName  String
  email     String   @unique
  Username  String   @unique
  Password  String
  role      Role
  adopter   Adopter?
  adoptee   Adoptee?
  favourites Favourite[]
}

enum Sex {
  Female
  Male
}

enum Role {
  Adopter //Adopter
  Adoptee //Adoptee
}

model Adopter {
  id         Int    @id @default(autoincrement())
  firstName  String
  lastName   String
  age        Int
  sex        Sex
  status     String
  photoUrl   String
  background String
  city       String
  country      String
  UserId     Int      @unique
  User       user     @relation(fields: [UserId], references: [id])
  Location   Location @relation(fields: [LocationId], references: [id])
  LocationId Int

  preferences AdopterPreference[]
  AdopteePreference AdopteePreference[]
  TextScore         TextScore[]
  favourites        Favourite[]
}

model Adoptee {
  id         Int    @id @default(autoincrement())
  firstName  String
  lastName   String
  age        Int
  sex        Sex
  birthdate  String
  photoUrl   String
  background String
  interests  String
  education  String
  traits     String
  dreams     String
  city       String
  country      String
  UserId     Int    @unique
  User       user   @relation(fields: [UserId], references: [id])
  Location   Location @relation(fields: [LocationId], references: [id])
  LocationId Int

  preferences AdopteePreference[]
  AdopterPreference AdopterPreference[]
  TextScore         TextScore[]
  favourites         Favourite[]
}

model AdopterPreference {
  id        Int     @id @default(autoincrement())
  adopterId Int
  adopteeId Int
  adopter   Adopter @relation(fields: [adopterId], references: [id])
  adoptee   Adoptee @relation(fields: [adopteeId], references: [id])
  rank      Int

  @@unique([adopterId, adopteeId])
}

model AdopteePreference {
  id        Int     @id @default(autoincrement())
  adopteeId Int
  adopterId Int
  adoptee   Adoptee @relation(fields: [adopteeId], references: [id])
  adopter   Adopter @relation(fields: [adopterId], references: [id])
  rank      Int

  @@unique([adopteeId, adopterId])
}

model TextScore {
  adopterId Int
  adopteeId Int
  score     Float
  Adopter   Adopter @relation(fields: [adopterId], references: [id])
  Adoptee   Adoptee @relation(fields: [adopteeId], references: [id])

  @@unique([adopterId, adopteeId])
}

model Location {
  id        Int     @id @default(autoincrement())
  latitude   Float?
  longitude  Float?
  geohash    String?
  adopters   Adopter[]
  adoptees   Adoptee[]
}

model Favourite {
  id        Int      @id @default(autoincrement())
  UserId    Int
  adopterId Int?
  adopteeId Int?
  User      user     @relation(fields: [UserId], references: [id])
  adopter   Adopter? @relation(fields: [adopterId], references: [id])
  adoptee   Adoptee? @relation(fields: [adopteeId], references: [id])

  @@unique([UserId, adopterId, adopteeId])
}
